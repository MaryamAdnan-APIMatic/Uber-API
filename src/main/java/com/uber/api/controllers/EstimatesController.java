/*
 * UberAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package com.uber.api.controllers;

import com.uber.api.ApiHelper;
import com.uber.api.AuthManager;
import com.uber.api.Configuration;
import com.uber.api.exceptions.ApiException;
import com.uber.api.exceptions.ErrorException;
import com.uber.api.http.Headers;
import com.uber.api.http.client.HttpCallback;
import com.uber.api.http.client.HttpClient;
import com.uber.api.http.client.HttpContext;
import com.uber.api.http.request.HttpRequest;
import com.uber.api.http.response.HttpResponse;
import com.uber.api.http.response.HttpStringResponse;
import com.uber.api.models.PriceEstimate;
import com.uber.api.models.Product;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class EstimatesController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public EstimatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public EstimatesController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a
     * given location. The price estimate is provided as a formatted string with the full price
     * range and the localized currency symbol.<br><br>The response also includes low and high
     * estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for
     * situations requiring currency conversion. When surge is active for a particular product, its
     * surge_multiplier will be greater than 1, but the price estimate already factors in this
     * multiplier.
     * @param  startLatitude  Required parameter: Latitude component of start location.
     * @param  startLongitude  Required parameter: Longitude component of start location.
     * @param  endLatitude  Required parameter: Latitude component of end location.
     * @param  endLongitude  Required parameter: Longitude component of end location.
     * @return    Returns the List of PriceEstimate response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<PriceEstimate> priceEstimates(
            final double startLatitude,
            final double startLongitude,
            final double endLatitude,
            final double endLongitude) throws ApiException, IOException {
        HttpRequest request = buildPriceEstimatesRequest(startLatitude, startLongitude, endLatitude,
                endLongitude);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handlePriceEstimatesResponse(context);
    }

    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a
     * given location. The price estimate is provided as a formatted string with the full price
     * range and the localized currency symbol.<br><br>The response also includes low and high
     * estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for
     * situations requiring currency conversion. When surge is active for a particular product, its
     * surge_multiplier will be greater than 1, but the price estimate already factors in this
     * multiplier.
     * @param  startLatitude  Required parameter: Latitude component of start location.
     * @param  startLongitude  Required parameter: Longitude component of start location.
     * @param  endLatitude  Required parameter: Latitude component of end location.
     * @param  endLongitude  Required parameter: Longitude component of end location.
     * @return    Returns the List of PriceEstimate response from the API call
     */
    public CompletableFuture<List<PriceEstimate>> priceEstimatesAsync(
            final double startLatitude,
            final double startLongitude,
            final double endLatitude,
            final double endLongitude) {
        return makeHttpCallAsync(() -> buildPriceEstimatesRequest(startLatitude, startLongitude,
                endLatitude, endLongitude),
            request -> getClientInstance().executeAsync(request, false),
            context -> handlePriceEstimatesResponse(context));
    }

    /**
     * Builds the HttpRequest object for priceEstimates.
     */
    private HttpRequest buildPriceEstimatesRequest(
            final double startLatitude,
            final double startLongitude,
            final double endLatitude,
            final double endLongitude) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/estimates/price");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("start_latitude", startLatitude);
        queryParameters.put("start_longitude", startLongitude);
        queryParameters.put("end_latitude", endLatitude);
        queryParameters.put("end_longitude", endLongitude);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for priceEstimates.
     * @return An object of type List of PriceEstimate
     */
    private List<PriceEstimate> handlePriceEstimatesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorException("Unexpected error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<PriceEstimate> result = ApiHelper.deserializeArray(responseBody,
                PriceEstimate[].class);
        return result;
    }

    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with
     * the responses expressed as integers in seconds. We recommend that this endpoint be called
     * every minute to provide the most accurate, up-to-date ETAs.
     * @param  startLatitude  Required parameter: Latitude component of start location.
     * @param  startLongitude  Required parameter: Longitude component of start location.
     * @param  customerUuid  Optional parameter: Unique customer identifier to be used for
     *         experience customization.
     * @param  productId  Optional parameter: Unique identifier representing a specific product for
     *         a given latitude & longitude.
     * @return    Returns the List of Product response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Product> timeEstimates(
            final double startLatitude,
            final double startLongitude,
            final UUID customerUuid,
            final String productId) throws ApiException, IOException {
        HttpRequest request = buildTimeEstimatesRequest(startLatitude, startLongitude, customerUuid,
                productId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleTimeEstimatesResponse(context);
    }

    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with
     * the responses expressed as integers in seconds. We recommend that this endpoint be called
     * every minute to provide the most accurate, up-to-date ETAs.
     * @param  startLatitude  Required parameter: Latitude component of start location.
     * @param  startLongitude  Required parameter: Longitude component of start location.
     * @param  customerUuid  Optional parameter: Unique customer identifier to be used for
     *         experience customization.
     * @param  productId  Optional parameter: Unique identifier representing a specific product for
     *         a given latitude & longitude.
     * @return    Returns the List of Product response from the API call
     */
    public CompletableFuture<List<Product>> timeEstimatesAsync(
            final double startLatitude,
            final double startLongitude,
            final UUID customerUuid,
            final String productId) {
        return makeHttpCallAsync(() -> buildTimeEstimatesRequest(startLatitude, startLongitude,
                customerUuid, productId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleTimeEstimatesResponse(context));
    }

    /**
     * Builds the HttpRequest object for timeEstimates.
     */
    private HttpRequest buildTimeEstimatesRequest(
            final double startLatitude,
            final double startLongitude,
            final UUID customerUuid,
            final String productId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/estimates/time");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("start_latitude", startLatitude);
        queryParameters.put("start_longitude", startLongitude);
        queryParameters.put("customer_uuid", customerUuid);
        queryParameters.put("product_id", productId);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for timeEstimates.
     * @return An object of type List of Product
     */
    private List<Product> handleTimeEstimatesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if ((responseCode < 200) || (responseCode > 208)) {
            throw new ErrorException("Unexpected error", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Product> result = ApiHelper.deserializeArray(responseBody,
                Product[].class);
        return result;
    }

}